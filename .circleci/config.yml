version: 2.1

orbs:
  android: circleci/android@2.5.0
  advanced-checkout: vsco/advanced-checkout@1.1.0
  node: circleci/node@5.2.0

references:
  release_dependencies: &release_dependencies
    - danger
    - lint
    - test_module
    - test_android
    - validate_shell_files
    - sync_generated_files
    - test_ios
    - e2e_ios
    - e2e_android
    - appium_e2e_android

  dream11_prepare_config: &dream11_prepare_config
    prepare_steps:
      - prepare_dream11
    requires:
      - hold_test_dream11

commands:
  install_node_modules:
    parameters:
      app-dir:
        type: string
        default: .
    steps:
      - node/install:
          install-yarn: true
          node-version: 'v20.11.1'
      - node/install-packages:
          pkg-manager: yarn
          # Network concurrency is set to 1 for installation from GitHub to work.
          override-ci-command: yarn install --frozen-lockfile --network-concurrency 1
          app-dir: << parameters.app-dir >>
  install_pods:
    parameters:
      working_directory:
        type: string
      deployment:
        type: boolean
        default: false
    steps:
      - restore_cache:
          name: Restore Pods Cache
          keys:
            - v1-pods-{{ checksum "<< parameters.working_directory >>/Podfile.lock" }}
      - when:
          condition: << parameters.deployment >>
          steps:
            - run:
                name: Install Pods
                working_directory: << parameters.working_directory >>
                command: pod install --deployment
      - unless:
          condition: << parameters.deployment >>
          steps:
            - run:
                name: Install Pods
                working_directory: << parameters.working_directory >>
                command: pod install
      - save_cache:
          name: Save Pods Cache
          key: v1-pods-{{ checksum "<< parameters.working_directory >>/Podfile.lock" }}
          paths:
            - << parameters.working_directory >>/Pods
  find_and_replace:
    parameters:
      files:
        description: A space-separated list of files to search and replace in.
        type: string
      search:
        type: string
      replace:
        type: string
      working_directory:
        type: string
        default: ~/project
    steps:
      - run:
          name: Find and Replace in << parameters.files >>
          command: node ~/project/scripts/replace.js << parameters.search >> << parameters.replace >> << parameters.files >>
          working_directory: << parameters.working_directory >>

  prepare_custom_package:
    parameters:
      npm_package:
        type: string
      android_package:
        type: string
      api_endpoint:
        type: string
      working_directory:
        type: string
        default: ~/project
    steps:
      - run:
          name: Remove README.md file
          command: rm README.md
          working_directory: << parameters.working_directory >>
      - find_and_replace:
          files: package.json android/sourcemaps.gradle ios/sourcemaps.sh
          search: instabug-reactnative
          replace: << parameters.npm_package >>
          working_directory: << parameters.working_directory >>
      - find_and_replace:
          files: cli/upload/uploadSourcemaps.ts cli/upload/uploadSoFiles.ts
          search: api.instabug.com
          replace: << parameters.api_endpoint >>
          working_directory: << parameters.working_directory >>
      - find_and_replace:
          files: android/native.gradle
          search: 'com.instabug.library:instabug:'
          replace: 'com.instabug.library-<< parameters.android_package >>:instabug:'
          working_directory: << parameters.working_directory >>

  prepare_dream11:
    parameters:
      working_directory:
        type: string
        default: ~/project
    steps:
      - install_node_modules
      - prepare_custom_package:
          npm_package: '@instabug/instabug-reactnative-dream11'
          android_package: dream11
          api_endpoint: st001012dream11.instabug.com
          working_directory: << parameters.working_directory >>
      - run:
          name: Give execute permission to Dream11 script
          command: chmod +x ./scripts/dream-11-delete-unused-features.sh
          working_directory: << parameters.working_directory >>
      - run:
          name: Remove unused features
          command: ./scripts/dream-11-delete-unused-features.sh
          working_directory: << parameters.working_directory >>
      # Remove the NDK package to avoid dependency conflicts on Android.
      - run:
          name: Remove the NDK package
          command: yarn remove instabug-reactnative-ndk
          working_directory: << parameters.working_directory >>/examples/default

  notify_github:
    parameters:
      data:
        type: string
        description: The data to be passed to the GitHub API for creating the comment.
    steps:
      - run:
          name: Post comment on GitHub
          command: ./scripts/notify-github.sh "<< parameters.data >>"
  build_and_pack_sdk:
    parameters:
      working_directory:
        type: string
        default: ~/project
    steps:
      - install_node_modules
      - run:
          command: yarn build
          working_directory: ~/project
      - run:
          command: yarn pack --filename InstabugSDK.tgz
          working_directory: ~/project
      - run:
          command: yarn add file:../../InstabugSDK.tgz
          working_directory: <<parameters.working_directory>>
  setup_mitm_proxy:
    description: Install and configure MITM proxy
    steps:
      - run:
          name: Install Python3 and MITM Proxy
          command: |
            # Detect OS and install requirements accordingly
            if [ "$(uname)" == "Darwin" ]; then
              echo "Running on macOS..."
              brew install python3 openssl
            else
              echo "Running on Linux..."
              sudo apt-get update
              sudo apt-get install -y python3 python3-pip openssl
            fi

            # Verify installations
            python3 --version
            pip3 --version

            # Upgrade pip and install mitmproxy
            pip3 install --upgrade pip
            pip3 install mitmproxy==10.2.4

            # Start mitmdump
            mitmdump --set block_global=false &
            sleep 10

            # Create mitmproxy directory
            mkdir -p ~/.mitmproxy

            # Wait for certificate generation
            while [ ! -f ~/.mitmproxy/mitmproxy-ca-cert.pem ]; do
              sleep 2
            done

            # Create all required certificate formats
            cd ~/.mitmproxy
            # Create .cer (PEM format)
            cp mitmproxy-ca-cert.pem mitmproxy-ca-cert.cer
            # Create .crt (PEM format)
            cp mitmproxy-ca-cert.pem mitmproxy-ca-cert.crt
            # Create .der format for iOS
            openssl x509 -in mitmproxy-ca-cert.pem -outform DER -out mitmproxy-ca-cert.der

            echo "MITM Proxy setup completed"

  setup_appium:
    steps:
      - run:
          name: Install and Setup Appium
          command: |
            npm install -g appium@2.11.4

            # Install iOS and Android drivers
            appium driver install uiautomator2@3.0.5
            appium driver install xcuitest@7.9.1

            # Install test dependencies
            npm install --save-dev webdriverio@9.1.0
            npm install --save-dev appium@2.11.4
            npm install --save-dev jest@29.7.0
            npm install --save-dev appium-uiautomator2-driver@3.0.5
            npm install --save-dev appium-xcuitest-driver@7.9.1

            # Install Android build tools and platform tools
            sdkmanager "build-tools;34.0.0"
            sdkmanager "platform-tools"
            sdkmanager "platforms;android-34"

            # Verify installations
            echo "Verifying installations..."
            appium --version
            appium driver list --installed

      - run:
          name: Start Appium Server
          background: true
          command: |
            appium \
              --log-timestamp \
              --debug-log-spacing \
              --allow-insecure chromedriver_autodownload \
              --base-path / \
              --log appium.log &

            # Wait for server to start
            for i in $(seq 1 30); do
              if curl -s http://localhost:4723/wd/hub/status | grep -q "ready"; then
                echo "Appium server is ready"
                break
              fi
              echo "Waiting for Appium server... ($i/30)"
              sleep 2
            done
  setup_android_proxy:
    steps:
      - run:
          name: Setup Android SDK and Emulator
          command: |
            sdkmanager --install "platform-tools" "platforms;android-34" "build-tools;34.0.0" "system-images;android-34;google_apis;x86_64"
            echo "no" | avdmanager create avd -n Pixel_8 \
              -k "system-images;android-34;google_apis;x86_64" \
              -d "pixel_3a" \
              --force

      - run:
          name: Start Emulator with System Writable
          background: true
          command: |
            emulator -avd Pixel_8 \
              -no-snapshot \
              -no-boot-anim \
              -no-window \
              -gpu swiftshader_indirect \
              -no-audio \
              -writable-system \
              -selinux permissive \
              -qemu -enable-kvm

      - run:
          name: Wait for Emulator and Setup Certificates
          command: |
            # Wait for device to be ready
            for i in $(seq 1 30); do
              if adb devices | grep -q "emulator"; then
                break
              fi
              echo "Waiting for emulator to start... ($i/30)"
              sleep 10
            done

            # Wait for boot complete
            adb wait-for-device
            for i in $(seq 1 30); do
              if adb shell getprop sys.boot_completed | grep -q "1"; then
                break
              fi
              echo "Waiting for boot to complete... ($i/30)"
              sleep 10
            done

            # Prepare system for certificate installation
            adb root
            sleep 5
            adb shell avbctl disable-verification
            sleep 2
            adb reboot

            # Wait for reboot
            sleep 30
            adb wait-for-device

            # Remount with proper steps
            adb root
            sleep 5
            adb shell setenforce 0
            adb disable-verity
            adb reboot

            # Wait for second reboot
            sleep 30
            adb wait-for-device

            # Final remount
            adb root
            sleep 5
            adb remount

            # Verify system is writable
            adb shell touch /system/test_writable
            if [ $? -ne 0 ]; then
              echo "System partition is not writable!"
              exit 1
            fi
            adb shell rm /system/test_writable

            # Install certificate
            echo "Installing certificate..."
            HASH=$(openssl x509 -inform PEM -subject_hash_old -in ~/.mitmproxy/mitmproxy-ca-cert.pem | head -1)
            cp ~/.mitmproxy/mitmproxy-ca-cert.pem $HASH.0

            # Try multiple methods to install certificate
            for method in {1..3}; do
              case $method in
                1)
                  echo "Trying method 1: Direct push to /system/etc/security/cacerts"
                  adb push $HASH.0 /system/etc/security/cacerts/ && \
                  adb shell "chmod 644 /system/etc/security/cacerts/$HASH.0" && \
                  break
                  ;;
                2)
                  echo "Trying method 2: Push to temp and move"
                  adb push $HASH.0 /data/local/tmp/ && \
                  adb shell "su 0 mount -o rw,remount /system" && \
                  adb shell "su 0 cp /data/local/tmp/$HASH.0 /system/etc/security/cacerts/" && \
                  adb shell "su 0 chmod 644 /system/etc/security/cacerts/$HASH.0" && \
                  break
                  ;;
                3)
                  echo "Trying method 3: Use temporary certificate directory"
                  adb shell "mkdir -p /data/local/tmp/certs" && \
                  adb push $HASH.0 /data/local/tmp/certs/ && \
                  adb shell "chown -R root:root /data/local/tmp/certs" && \
                  adb shell "chmod -R 644 /data/local/tmp/certs/*" && \
                  export CERT_PATH="/data/local/tmp/certs" && \
                  break
                  ;;
              esac
            done

            # Verify certificate installation
            adb shell ls -l /system/etc/security/cacerts/$HASH.0 || \
            adb shell ls -l /data/local/tmp/certs/$HASH.0

            # Configure proxy settings
            adb shell settings put global http_proxy "localhost:8080"
            adb shell settings put global global_http_proxy_host "localhost"
            adb shell settings put global global_http_proxy_port 8080

            # Verify proxy settings
            echo "Verifying proxy settings..."
            adb shell settings get global http_proxy
            adb shell settings get global global_http_proxy_host
            adb shell settings get global global_http_proxy_port

      - run:
          name: Start MITM Proxy with Verbose Logging
          background: true
          command: |
            mitmdump -p 8080 --set block_global=false --verbose &
            sleep 5

            # Verify proxy is running
            if ! pgrep -f "mitmdump"; then
              echo "Proxy failed to start"
              exit 1
            fi

            # Monitor proxy logs
            tail -f ~/.mitmproxy/mitmproxy.log &
  setup_ios_simulator:
    steps:
      - run:
          name: Install iOS Simulator
          command: |
            xcversion simulators --install='iOS 15.5'

            # Create simulator
            UDID=$(xcrun simctl create "iPhone 11 Pro Max" com.apple.CoreSimulator.SimDeviceType.iPhone-11-Pro-Max com.apple.CoreSimulator.SimRuntime.iOS-15-5)

            # Export simulator UDID for other steps
            echo "export SIMULATOR_UDID=$UDID" >> $BASH_ENV
            source $BASH_ENV

      - run:
          name: Start iOS Simulator
          background: true
          command: |
            # Start Simulator in headless mode
            xcrun simctl boot $SIMULATOR_UDID

            # Start Simulator.app in headless mode
            open -a Simulator --args -CurrentDeviceUDID $SIMULATOR_UDID -ConnectHardwareKeyboard 0 -StatusBar 1 -NoUIRestore 1

      - run:
          name: Wait for Simulator
          command: |
            # Wait for device to be ready
            for i in $(seq 1 30); do
              if xcrun simctl list | grep -q "Booted"; then
                echo "Simulator is booted"
                break
              fi
              echo "Waiting for simulator to start... ($i/30)"
              sleep 10
            done

            # Wait for system to be ready
            for i in $(seq 1 30); do
              if xcrun simctl spawn $SIMULATOR_UDID launchctl print system | grep -q "com.apple.springboard"; then
                echo "System is ready"
                break
              fi
              echo "Waiting for system to be ready... ($i/30)"
              sleep 10
            done

            # Verify simulator status
            xcrun simctl list devices
            xcrun simctl spawn $SIMULATOR_UDID launchctl print system

  setup_ios_proxy:
    steps:
      - run:
          name: Configure iOS Proxy Settings
          command: |
            xcrun simctl spawn $SIMULATOR_UDID defaults write com.apple.mobilesafari WebKitPreferences.encryption "HTTP/1.1"
            xcrun simctl spawn $SIMULATOR_UDID defaults write com.apple.CFNetwork.plist HTTPProxy -dict HTTPEnable 1 HTTPPort 8080 HTTPProxy localhost
            xcrun simctl spawn $SIMULATOR_UDID defaults write com.apple.CFNetwork.plist HTTPSProxy -dict HTTPSEnable 1 HTTPSPort 8080 HTTPSProxy localhost

            echo "Verifying proxy settings..."
            xcrun simctl spawn $SIMULATOR_UDID defaults read com.apple.CFNetwork.plist

  setup_ios_certificate:
    steps:
      - run:
          name: Install and Trust Certificate
          command: |
            # Wait for certificate files
            while [ ! -f ~/.mitmproxy/mitmproxy-ca-cert.der ]; do
              echo "Waiting for MITM certificate..."
              sleep 2
            done

            # Install in simulator
            xcrun simctl keychain $SIMULATOR_UDID add-root-cert ~/.mitmproxy/mitmproxy-ca-cert.der
            sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain ~/.mitmproxy/mitmproxy-ca-cert.pem

            # Add to simulator profiles
            xcrun simctl spawn $SIMULATOR_UDID mkdir -p /Library/Keychains/
            xcrun simctl push $SIMULATOR_UDID ~/.mitmproxy/mitmproxy-ca-cert.der /Library/Keychains/mitmproxy-ca-cert.der
            xcrun simctl spawn $SIMULATOR_UDID profiles trust-root-cert /Library/Keychains/mitmproxy-ca-cert.der

            echo "Certificate installation completed"

jobs:
  danger:
    executor:
      name: node/default
    steps:
      - advanced-checkout/shallow-checkout
      - install_node_modules
      - attach_workspace:
          at: coverage
      - run:
          name: Run Danger
          command: yarn danger ci

  lint:
    executor:
      name: node/default
    steps:
      - advanced-checkout/shallow-checkout
      - install_node_modules
      - run:
          name: Check Format
          command: yarn format
      - run:
          name: Check Lint
          command: yarn lint:ci

  test_module:
    parameters:
      prepare_steps:
        type: steps
        default: []
      collect_coverage:
        type: boolean
        default: false
    executor:
      name: node/default
    steps:
      - advanced-checkout/shallow-checkout
      - steps: << parameters.prepare_steps >>
      - install_node_modules
      - run:
          name: Run Tests
          command: yarn test
      - when:
          condition: << parameters.collect_coverage >>
          steps:
            - persist_to_workspace:
                root: coverage
                paths:
                  - lcov.info

  test_android:
    parameters:
      prepare_steps:
        type: steps
        default: []
      collect_coverage:
        type: boolean
        default: false
    executor:
      name: android/android-machine
      tag: '2024.01.1'
    working_directory: ~/project/examples/default
    environment:
      INSTABUG_SOURCEMAPS_UPLOAD_DISABLE: true
    steps:
      - advanced-checkout/shallow-checkout
      - steps: << parameters.prepare_steps >>
      - install_node_modules
      - android/run-tests:
          working-directory: android
          test-command: ./gradlew test
      - when:
          condition: << parameters.collect_coverage >>
          steps:
            - persist_to_workspace:
                root: ~/project/android/build/reports/jacoco/jacocoTestReport
                paths:
                  - jacocoTestReport.xml

  validate_shell_files:
    machine:
      image: ubuntu-2004:current
    steps:
      - advanced-checkout/shallow-checkout
      - run:
          name: Validate Scripts
          command: ls scripts/*.sh | xargs bash -n
      - run:
          name: Validate iOS Script
          command: bash -n ios/sourcemaps.sh

  # Make sure that files like yarn.lock and project.pbxproj
  # are in sync with the latest changes in package.json and
  # ios/upload_sourcemap.sh files respectively.
  sync_generated_files:
    macos:
      xcode: 13.4.1
    resource_class: macos.m1.medium.gen1
    steps:
      - advanced-checkout/shallow-checkout
      - install_node_modules
      - node/install-packages:
          pkg-manager: yarn
          app-dir: examples/default
      - install_pods:
          working_directory: examples/default/ios
          deployment: true
      - run: git --no-pager diff
      - run: git diff-index HEAD --exit-code -p -I EXCLUDED_ARCHS # Ignore Arch Changes

  test_ios:
    parameters:
      prepare_steps:
        type: steps
        default: []
      collect_coverage:
        type: boolean
        default: false
    macos:
      xcode: 13.4.1
    resource_class: macos.m1.medium.gen1
    working_directory: ~/project/examples/default
    environment:
      INSTABUG_SOURCEMAPS_UPLOAD_DISABLE: true
    steps:
      - advanced-checkout/shallow-checkout
      - steps: << parameters.prepare_steps >>
      - install_node_modules
      - install_pods:
          working_directory: ios
      - run:
          name: Build and run tests
          working_directory: ios
          command: |
            xcodebuild -allowProvisioningUpdates \
                -workspace InstabugExample.xcworkspace \
                -scheme InstabugExample \
                -resultBundlePath coverage/result.xcresult \
                -sdk iphonesimulator \
                -destination "platform=iOS Simulator,OS=15.5,name=iPhone 11 Pro Max" \
                test | xcpretty
      - when:
          condition: << parameters.collect_coverage >>
          steps:
            - run:
                name: Convert xcresult into JSON report
                working_directory: ios/coverage
                command: xcrun xccov view --report --json result.xcresult > xcode.json
            - persist_to_workspace:
                root: ios/coverage
                paths:
                  - xcode.json

  e2e_ios:
    parameters:
      prepare_steps:
        type: steps
        default: []
    macos:
      xcode: 13.4.1
    resource_class: macos.m1.medium.gen1
    environment:
      INSTABUG_SOURCEMAPS_UPLOAD_DISABLE: true
    steps:
      - advanced-checkout/shallow-checkout
      - steps: << parameters.prepare_steps >>
      - install_node_modules
      - node/install-packages:
          pkg-manager: yarn
          app-dir: examples/default
      - install_pods:
          working_directory: examples/default/ios
      - run:
          name: Install Detox CLI
          command: npm install -g detox-cli
      - run:
          name: Install Detox Utils
          command: brew tap wix/brew && brew install applesimutils
      - run:
          name: Rebuild Detox.framework Cache
          working_directory: examples/default
          command: detox clean-framework-cache && detox build-framework-cache
      # This is a workaround until the iOS SDK is updated to prioritize the custom
      # Instabug.plist over the internal Config.plist.
      - run:
          name: Customize API Endpoints
          command: ./scripts/customize-ios-endpoints.sh
      - run:
          name: Detox - Build Release App
          working_directory: examples/default
          command: detox build --configuration ios.sim.release --cleanup
      - run:
          name: Detox - Run E2E Tests
          working_directory: examples/default
          command: detox test --configuration ios.sim.release --cleanup

  e2e_android:
    parameters:
      prepare_steps:
        type: steps
        default: []
    executor:
      name: android/android-machine
      tag: '2024.01.1'
      resource-class: large
    environment:
      INSTABUG_SOURCEMAPS_UPLOAD_DISABLE: true
    steps:
      - advanced-checkout/shallow-checkout
      - steps: << parameters.prepare_steps >>
      - install_node_modules
      - node/install-packages:
          pkg-manager: yarn
          app-dir: examples/default
      - run:
          name: Install Detox CLI
          command: npm install -g detox-cli
      - android/create-avd:
          avd-name: Nexus_6P_API_27
          install: true
          system-image: system-images;android-27;default;x86
      - android/start-emulator:
          avd-name: Nexus_6P_API_27
          no-window: true
          memory: 2048
          post-emulator-launch-assemble-command: |
            rm -rf ~/.gradle/caches
            cd ~/project/examples/default/android && ./gradlew androidDependencies
            cd .. && detox build -c android.emu.release
      - run:
          name: Detox - Run E2E Tests
          working_directory: examples/default
          command: detox test -c android.emu.release

  release_custom_package:
    parameters:
      prepare_steps:
        type: steps
        default: []
    working_directory: ~/project
    executor:
      name: node/default
    steps:
      - advanced-checkout/shallow-checkout
      - steps: << parameters.prepare_steps >>
      - install_node_modules
      - run:
          name: Build the SDK
          command: yarn build
      - run:
          name: Authorize with NPM
          command: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
      - run:
          name: Publish new enterprise version
          command: npm publish

  publish:
    macos:
      xcode: 13.4.1
    resource_class: macos.m1.medium.gen1
    working_directory: '~'
    steps:
      - advanced-checkout/shallow-checkout
      - run: git clone git@github.com:Instabug/Escape.git
      - run:
          working_directory: Escape
          command: swift build -c release
      - run:
          working_directory: Escape/.build/release
          command: cp -f Escape /usr/local/bin/escape
      - install_node_modules:
          app-dir: project
      - run:
          working_directory: project
          command: yarn build
      - run:
          working_directory: project
          command: Escape react-native publish
  publish_new_namespace:
    working_directory: ~/project
    executor:
      name: node/default
    steps:
      - advanced-checkout/shallow-checkout
      - find_and_replace:
          files: package.json
          search: instabug-reactnative
          replace: '@instabug/react-native'
      - run: git clone git@github.com:Instabug/Escape.git
      - run:
          working_directory: Escape
          command: swift build -c release
      - run:
          working_directory: Escape/.build/release
          command: cp -f Escape /usr/local/bin/escape
      - install_node_modules:
          app-dir: project
      - run:
          working_directory: project
          command: yarn build
      - run:
          working_directory: project
          command: Escape react-native publish

  generate_snapshot:
    executor:
      name: node/default
    steps:
      - advanced-checkout/shallow-checkout
      - install_node_modules
      - run: yarn build
      - run: yarn remove @instabug/danger-plugin-coverage
      - run:
          name: Get snapshot version
          command: |
            source scripts/snapshot-version.sh
            echo "export SNAPSHOT_VERSION=$SNAPSHOT_VERSION" >> "$BASH_ENV"
      - run:
          name: Authorize with NPM
          command: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
      - run: npm version $SNAPSHOT_VERSION --no-git-tag-version
      - run: npm publish --tag snapshot
      - run:
          name: Install jq
          command: sudo apt-get update && sudo apt-get install -y jq
      - find_and_replace:
          files: scripts/snapshot-comment.md
          search: '{VERSION}'
          replace: $SNAPSHOT_VERSION
      - notify_github:
          data: "$(jq -Rcs '{ body: . }' scripts/snapshot-comment.md)"
  appium_e2e_android:
    parameters:
      working_directory:
        type: string
    executor:
      name: android/android-machine
      tag: '2024.01.1'
      resource-class: large
    steps:
      - advanced-checkout/shallow-checkout
      - install_node_modules:
          app-dir: << parameters.working_directory >>
      - build_and_pack_sdk:
          working_directory: << parameters.working_directory >>
      # Build Android app
      - run:
          name: Build Android
          working_directory: <<parameters.working_directory>>/android
          command: ./gradlew assembleRelease
      - store_artifacts:
          path: <<parameters.working_directory>>/android/app/build/outputs/apk/release/app-release.apk
          destination: app-release.apk
      - run:
          name: Export APK Path
          command: |
            echo "export APK_PATH=<<parameters.working_directory>>/android/app/build/outputs/apk/release/app-release.apk" >> $BASH_ENV
            source $BASH_ENV
      # Setup testing environment
      - setup_mitm_proxy
      - setup_android_proxy
      - setup_appium
      - run:
          name: Start MITM Proxy
          background: true
          command: |
            mitmdump -p 8080 --set block_global=false &
            sleep 5

      # Run tests
      - run:
          name: Run E2E Tests
          working_directory: << parameters.working_directory >>
          command: |
            node --experimental-vm-modules node_modules/jest/bin/jest.js --config=jest.config.js
          environment:
            E2E_DEVICE: 'android'
  appium_e2e_ios:
    parameters:
      working_directory:
        type: string
    macos:
      xcode: 13.4.1
    steps:
      - advanced-checkout/shallow-checkout
      - install_node_modules:
          app-dir: << parameters.working_directory >>
      - build_and_pack_sdk:
          working_directory: << parameters.working_directory >>
      # Build iOS app
      - run:
          name: Install CocoaPods
          working_directory: <<parameters.working_directory>>/ios
          command: pod install
      - run:
          name: Build iOS App
          working_directory: <<parameters.working_directory>>/ios
          command: |
            xcodebuild -workspace HybridSampleApp.xcworkspace \
                      -scheme HybridSampleApp \
                      -configuration Release \
                      -sdk iphonesimulator \
                      -destination "platform=iOS Simulator,name=iPhone 11 Pro Max,OS=15.5" \
                      build
      # Setup testing environment
      - setup_mitm_proxy
      - setup_ios_simulator
      - setup_ios_certificate
      - setup_ios_proxy
      - setup_appium
      - run:
          name: Start MITM Proxy
          background: true
          command: |
            mitmdump -p 8080 --set block_global=false &
            sleep 5

      # Run tests
      - run:
          name: Run E2E Tests
          working_directory: << parameters.working_directory >>
          command: |
            node --experimental-vm-modules node_modules/jest/bin/jest.js --config=jest.config.js
          environment:
            E2E_DEVICE: 'ios'
workflows:
  publish:
    jobs:
      - danger:
          requires:
            - test_module
            - test_android
            - test_ios
      - lint
      - test_module:
          collect_coverage: true
      - test_android:
          collect_coverage: true
      - test_ios:
          collect_coverage: true
      - validate_shell_files
      - sync_generated_files
      - e2e_ios
      - e2e_android
      - hold_generate_snapshot:
          type: approval
          requires: *release_dependencies
      - generate_snapshot:
          requires:
            - hold_generate_snapshot
      - hold_publish:
          requires: *release_dependencies
          type: approval
          filters:
            branches:
              only: master
      - hold_publish_new_namespace:
          requires: *release_dependencies
          type: approval
          filters:
            branches:
              only: master
      - publish:
          requires:
            - hold_publish
          filters:
            branches:
              only: master
      - publish_new_namespace:
          requires:
            - hold_publish_new_namespace
          filters:
            branches:
              only: master

      - hold_release_nn:
          requires: *release_dependencies
          type: approval
          filters:
            branches:
              only: master
      - release_custom_package:
          name: release_nn
          requires:
            - hold_release_nn
          filters:
            branches:
              only: master
          prepare_steps:
            - prepare_custom_package:
                npm_package: '@instabug/react-native-nn'
                android_package: nn
                api_endpoint: st001009nn.instabug.com

      - hold_release_injazat:
          requires: *release_dependencies
          type: approval
          filters:
            branches:
              only: master
      - release_custom_package:
          name: release_injazat
          requires:
            - hold_release_injazat
          filters:
            branches:
              only: master
          prepare_steps:
            - prepare_custom_package:
                npm_package: '@instabug/react-native-injazat'
                android_package: injazat
                api_endpoint: st001013mec1.instabug.com

      # Dream11 tests
      - hold_test_dream11:
          type: approval
      - test_module:
          name: test_module_dream11
          <<: *dream11_prepare_config
      - test_android:
          name: test_android_dream11
          <<: *dream11_prepare_config
      - test_ios:
          name: test_ios_dream11
          <<: *dream11_prepare_config
      - e2e_android:
          name: e2e_android_dream11
          <<: *dream11_prepare_config
      - e2e_ios:
          name: e2e_ios_dream11
          <<: *dream11_prepare_config

      # Dream11 release
      - hold_release_dream11:
          requires:
            - test_module_dream11
            - test_android_dream11
            - test_ios_dream11
            - e2e_android_dream11
            - e2e_ios_dream11
          type: approval
          filters:
            branches:
              only: dream11
      - hold_appium_e2e:
          type: approval
      - appium_e2e_android:
          working_directory: ~/project/examples/hybrid
          requires:
            - hold_appium_e2e
      - appium_e2e_ios:
          working_directory: ~/project/examples/hybrid
          requires:
            - hold_appium_e2e
      - release_custom_package:
          name: release_dream11
          requires:
            - appium_e2e_android
            - appium_e2e_ios
            - hold_release_dream11
          filters:
            branches:
              only: dream11
          prepare_steps:
            - prepare_dream11
