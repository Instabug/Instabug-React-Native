import org.apache.tools.ant.taskdefs.condition.Os

def appProject = project(":app")

gradle.projectsEvaluated {
    // Works for both `bundleReleaseJsAndAssets` and `createBundleReleaseJsAndAssets`
    def bundleTask = appProject.tasks.find {
        task -> task.name.endsWithIgnoreCase('bundleReleaseJsAndAssets')
    }

    bundleTask.finalizedBy uploadSourcemap
}

task uploadSourcemap() {
    group 'instabug'
    description 'Uploads sourcemaps file to Instabug server'
    enabled rootProject.hasProperty('instabugUploadEnable')
            ? new Boolean(rootProject.property('instabugUploadEnable'))
            : true

    doLast {
        def env = System.getenv()
        def jsProjectDir = rootDir.parentFile
        def instabugDir = new File(['node', '-p', 'require.resolve("instabug-reactnative/package.json")'].execute(null, rootDir).text.trim()).getParentFile()

        def tokenShellFile = new File(instabugDir, 'scripts/find-token.sh')
        def inferredToken = executeShellScript(tokenShellFile, jsProjectDir)
        def appToken = env.getOrDefault('INSTABUG_APP_TOKEN', inferredToken)

        if (appToken == null) {
            project.logger.lifecycle 'Failed to find Instabug App Token! ' +
                    'Set the enviroment variable `INSTABUG_APP_TOKEN`, ' +
                    'to enable automatic sourcemap file uploads.'
            return
        }

        def projectConfig = appProject.android.defaultConfig
        def versionName = env.getOrDefault('INSTABUG_VERSION_NAME', projectConfig.versionName)
        def versionCode = env.getOrDefault('INSTABUG_VERSION_CODE', projectConfig.versionCode)

        def appDir = appProject.projectDir
        def sourcemapDest = 'build/generated/sourcemaps/react/release/index.android.bundle.map'
        def sourcemapFile = new File(appDir, sourcemapDest)

        if (!sourcemapFile.exists()) {
            project.logger.lifecycle "Failed to find Sourcemap file at: ${sourcemapFile.absolutePath}"
            project.logger.lifecycle 'Skipping automatic sourcemap uploads'
            return
        }

        exec {
            def osCompatibility = Os.isFamily(Os.FAMILY_WINDOWS) ? ['cmd', '/c'] : []
            def args = [
                    'npx', 'instabug', 'upload-sourcemaps',
                        '--platform', 'android',
                        '--token', appToken,
                        '--name', versionName,
                        '--code', versionCode,
                        '--file', sourcemapFile.absolutePath
            ]

            commandLine(*osCompatibility, *args)
        }
    }
}

static String executeShellScript(File script, File workingDir) {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        return null
    }

    def output = new StringBuffer()
    def process = ['sh', script.getAbsolutePath()].execute(null, workingDir)
    process?.waitForProcessOutput(output, new StringBuffer())

    return process?.exitValue() == 0 ? output.toString().trim() : null
}
