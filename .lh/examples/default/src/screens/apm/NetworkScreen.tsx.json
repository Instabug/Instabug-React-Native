{
    "sourceFile": "examples/default/src/screens/apm/NetworkScreen.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1744632518250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1744632518250,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react';\nimport { Image, ScrollView, StyleSheet, Text, useWindowDimensions, View } from 'react-native';\nimport { Section } from '../../components/Section';\nimport { Screen } from '../../components/Screen';\nimport { ClipboardTextInput } from '../../components/ClipboardTextInput';\nimport { useQuery } from 'react-query';\nimport { HStack, VStack } from 'native-base';\nimport { gql, request } from 'graphql-request';\nimport { CustomButton } from '../../components/CustomButton';\nimport axios from 'axios';\nimport type { HomeStackParamList } from '../../navigation/HomeStack';\nimport type { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport { ListTile } from '../../components/ListTile';\n\nexport const NetworkScreen: React.FC<\n  NativeStackScreenProps<HomeStackParamList, 'NetworkTraces'>\n> = ({ navigation }) => {\n  const [endpointUrl, setEndpointUrl] = useState('');\n  const { width, height } = useWindowDimensions();\n  const defaultRequestBaseUrl = 'https://jsonplaceholder.typicode.com/posts/';\n  const shortenLink = 'https://shorturl.at/3Ufj3';\n  const defaultRequestUrl = `${defaultRequestBaseUrl}1`;\n\n  const imageUrls = [\n    'https://fastly.picsum.photos/id/57/200/300.jpg?hmac=l908G1qVr4r7dP947-tak2mY8Vvic_vEYzCXUCKKskY',\n    'https://fastly.picsum.photos/id/619/200/300.jpg?hmac=WqBGwlGjuY9RCdpzRaG9G-rc9Fi7TGUINX_-klAL2kA',\n  ];\n\n  async function sendRequestToUrl() {\n    let urlToSend: string;\n\n    if (endpointUrl.trim() !== '') {\n      urlToSend = endpointUrl;\n      console.log('Sending request to: ', endpointUrl);\n    } else {\n      // Use json placeholder URL as a default if endpointUrl is empty\n      console.log('sending request to default json placeholder');\n      urlToSend = defaultRequestUrl;\n    }\n\n    try {\n      // Perform the request using the urlToSend\n      const response = await fetch(urlToSend);\n      const data = await response.json();\n\n      // Format the JSON response for better logging\n      const formattedData = JSON.stringify(data, null, 2);\n\n      // Log the formatted response\n      console.log('Response:', formattedData);\n    } catch (error) {\n      // Handle errors appropriately\n      console.error('Error:', error);\n    }\n  }\n\n  async function sendRequestToUrlUsingAxios() {\n    let urlToSend: string;\n\n    if (endpointUrl.trim() !== '') {\n      urlToSend = endpointUrl;\n      console.log('Sending request to: ', endpointUrl);\n    } else {\n      // Use json placeholder URL as a default if endpointUrl is empty\n      console.log('sending request to default json placeholder');\n      urlToSend = defaultRequestUrl;\n    }\n\n    try {\n      // Perform the request using the urlToSend\n      const response = await axios.get(urlToSend);\n      // Format the JSON response for better logging\n      const formattedData = JSON.stringify(response.data, null, 2);\n\n      // Log the formatted response\n      console.log('Response:', formattedData);\n    } catch (error) {\n      // Handle errors appropriately\n      console.error('Error:', error);\n    }\n  }\n\n  async function sendRedirectRequestToUrl() {\n    try {\n      console.log('Sending request to: ', shortenLink);\n      const response = await fetch(shortenLink);\n      console.log('Received from: ', response.url);\n\n      // Format the JSON response for better logging\n      const data = await response.json();\n\n      // Format the JSON response for better logging\n      const formattedData = JSON.stringify(data, null, 2);\n\n      // Log the formatted response\n      console.log('Response:', formattedData);\n    } catch (error) {\n      // Handle errors appropriately\n      console.error('Error:', error);\n    }\n  }\n\n  const fetchGraphQlData = async () => {\n    const document = gql`\n      query {\n        country(code: \"EG\") {\n          emoji\n          name\n        }\n      }\n    `;\n\n    return request<{ country: { emoji: string; name: string } }>(\n      'https://countries.trevorblades.com/graphql',\n      document,\n    );\n  };\n\n  const { data, isError, isSuccess, isLoading, refetch } = useQuery('helloQuery', fetchGraphQlData);\n  const simulateNetworkRequest = () => {\n    axios.get('https://httpbin.org/anything', {\n      headers: { traceparent: 'Caught Header Example' },\n    });\n  };\n  const simulateNetworkRequestWithoutHeader = () => {\n    axios.get('https://httpbin.org/anything');\n  };\n\n  function generateUrls(count: number = 10) {\n    const urls = [];\n    for (let i = 1; i <= count; i++) {\n      urls.push(defaultRequestBaseUrl + i);\n    }\n    return urls;\n  }\n\n  async function makeSequentialApiCalls(urls: string[]): Promise<any[]> {\n    // const fetchPromises = urls.map((url) => fetch(url).then((response) => response.json()));\n    const results: any[] = [];\n\n    try {\n      for (let i = 0; i < urls.length; i++) {\n        await fetch(urls[i]);\n        results.push(results[i]);\n      }\n      return results;\n    } catch (error) {\n      console.error('Error making parallel API calls:', error);\n      throw error;\n    }\n  }\n  async function makeParallelApiCalls(urls: string[]): Promise<any[]> {\n    const fetchPromises = urls.map((url) => fetch(url).then((response) => response.json()));\n\n    try {\n      return await Promise.all(fetchPromises);\n    } catch (error) {\n      console.error('Error making parallel API calls:', error);\n      throw error;\n    }\n  }\n\n  return (\n    <ScrollView>\n      <Screen>\n        <Section title=\"Network Requests\">\n          <VStack space=\"xs\">\n            <ClipboardTextInput\n              placeholder=\"Endpoint Url\"\n              onChangeText={(text) => setEndpointUrl(text)}\n              selectTextOnFocus={true}\n              value={endpointUrl}\n            />\n            <CustomButton onPress={sendRequestToUrl} title=\"Send Request To Url\" />\n            <CustomButton\n              onPress={sendRedirectRequestToUrl}\n              title=\"Send Redirection Request To Url\"\n            />\n            <CustomButton\n              onPress={sendRequestToUrlUsingAxios}\n              title=\"Send Request To Url Using Axios\"\n            />\n            <ListTile\n              title=\"Simulate Network Request With Header\"\n              onPress={() => simulateNetworkRequest()}\n            />\n            <ListTile\n              title=\"Simulate Network Request\"\n              onPress={() => simulateNetworkRequestWithoutHeader()}\n            />\n            <CustomButton onPress={() => refetch} title=\"Reload GraphQL\" />\n            <View>\n              {isLoading && <Text>Loading...</Text>}\n              {isSuccess && <Text>GraphQL Data: {data.country.emoji}</Text>}\n              {isError && <Text>Error!</Text>}\n            </View>\n          </VStack>\n        </Section>\n        <Section title=\"Images\">\n          <HStack marginTop=\"5\" space=\"xs\">\n            {imageUrls.map((imageUrl) => (\n              <Image\n                key={imageUrl}\n                source={{\n                  uri: imageUrl,\n                }}\n                style={[styles.image, { width: width * 0.45, height: height * 0.3 }]}\n              />\n            ))}\n          </HStack>\n        </Section>\n        <ListTile title=\"HTTP Screen\" onPress={() => navigation.navigate('HttpScreen')} />\n      </Screen>\n    </ScrollView>\n  );\n};\nconst styles = StyleSheet.create({\n  image: {\n    resizeMode: 'contain',\n  },\n  // Todo: Text Component\n  // Todo: Button Component\n  // Todo: Image Component\n});\n"
        }
    ]
}