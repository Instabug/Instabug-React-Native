{
    "sourceFile": "android/src/main/java/com/instabug/reactlibrary/RNInstabugReactnativeModule.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1742913538940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1742913538940,
            "name": "Commit-0",
            "content": "package com.instabug.reactlibrary;\n\nimport static com.instabug.reactlibrary.utils.InstabugUtil.getMethod;\n\nimport android.app.Application;\nimport android.graphics.Bitmap;\nimport android.net.Uri;\nimport android.util.Log;\nimport android.view.View;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.UiThread;\n\nimport com.facebook.react.bridge.Arguments;\nimport com.facebook.react.bridge.Callback;\nimport com.facebook.react.bridge.Promise;\nimport com.facebook.react.bridge.ReactApplicationContext;\nimport com.facebook.react.bridge.ReactMethod;\nimport com.facebook.react.bridge.ReadableArray;\nimport com.facebook.react.bridge.ReadableMap;\nimport com.facebook.react.bridge.WritableArray;\nimport com.facebook.react.bridge.WritableMap;\nimport com.facebook.react.bridge.WritableNativeArray;\nimport com.facebook.react.bridge.WritableNativeMap;\nimport com.facebook.react.uimanager.UIManagerModule;\nimport com.instabug.apm.InternalAPM;\nimport com.instabug.apm.configuration.cp.APMFeature;\nimport com.instabug.library.Feature;\nimport com.instabug.library.Instabug;\nimport com.instabug.library.InstabugColorTheme;\nimport com.instabug.library.InstabugCustomTextPlaceHolder;\nimport com.instabug.library.IssueType;\nimport com.instabug.library.LogLevel;\nimport com.instabug.library.ReproConfigurations;\nimport com.instabug.library.core.InstabugCore;\nimport com.instabug.library.internal.crossplatform.CoreFeature;\nimport com.instabug.library.internal.crossplatform.CoreFeaturesState;\nimport com.instabug.library.internal.crossplatform.FeaturesStateListener;\nimport com.instabug.library.internal.crossplatform.InternalCore;\nimport com.instabug.library.featuresflags.model.IBGFeatureFlag;\nimport com.instabug.library.featuresflags.model.IBGFeatureFlag;\nimport com.instabug.library.internal.module.InstabugLocale;\nimport com.instabug.library.invocation.InstabugInvocationEvent;\nimport com.instabug.library.logging.InstabugLog;\nimport com.instabug.library.model.NetworkLog;\nimport com.instabug.library.model.Report;\nimport com.instabug.library.ui.onboarding.WelcomeMessage;\nimport com.instabug.library.util.InstabugSDKLogger;\nimport com.instabug.reactlibrary.utils.ArrayUtil;\nimport com.instabug.reactlibrary.utils.EventEmitterModule;\nimport com.instabug.reactlibrary.utils.MainThreadHandler;\n\nimport com.instabug.reactlibrary.utils.RNTouchedViewExtractor;\n\nimport org.json.JSONException;\nimport org.json.JSONObject;\nimport org.json.JSONTokener;\n\nimport java.io.File;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\n\nimport javax.annotation.Nullable;\n\n\n/**\n * The type Rn instabug reactnative module.\n */\npublic class RNInstabugReactnativeModule extends EventEmitterModule {\n\n    private static final String TAG = \"IBG-RN-Core\";\n\n    private InstabugCustomTextPlaceHolder placeHolders;\n    private static Report currentReport;\n    private final ReactApplicationContext reactContext;\n\n    /**\n     * Instantiates a new Rn Instabug ReactNative module.\n     *\n     * @param reactContext the react context\n     */\n    public RNInstabugReactnativeModule(ReactApplicationContext reactContext) {\n        super(reactContext);\n\n        this.reactContext = reactContext;\n\n        //init placeHolders\n        placeHolders = new InstabugCustomTextPlaceHolder();\n    }\n\n    @Override\n    public String getName() {\n        return \"Instabug\";\n    }\n\n\n    @ReactMethod\n    public void addListener(String event) {\n        super.addListener(event);\n    }\n\n    @ReactMethod\n    public void removeListeners(Integer count) {\n        super.removeListeners(count);\n    }\n\n    /**\n     * Enables or disables Instabug functionality.\n     * @param isEnabled A boolean to enable/disable Instabug.\n     */\n    @ReactMethod\n    public void setEnabled(final boolean isEnabled) {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    if (isEnabled)\n                        Instabug.enable();\n                    else\n                        Instabug.disable();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n    }\n\n    /**\n     * Initializes the SDK.\n     *\n     * @param token                 The token that identifies the app. You can find it on your dashboard.\n     * @param invocationEventValues The events that invoke the SDK's UI.\n     * @param logLevel              The level of detail in logs that you want to print.\n     * @param codePushVersion       The Code Push version to be used for all reports.\n     */\n    @ReactMethod\n    public void init(\n            final String token,\n            final ReadableArray invocationEventValues,\n            final String logLevel,\n            final boolean useNativeNetworkInterception,\n            @Nullable final String codePushVersion\n    ) {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                final RNTouchedViewExtractor rnTouchedViewExtractor = new RNTouchedViewExtractor();\n                InstabugCore.setTouchedViewExtractorExtension(rnTouchedViewExtractor);\n                final ArrayList<String> keys = ArrayUtil.parseReadableArrayOfStrings(invocationEventValues);\n                final ArrayList<InstabugInvocationEvent> parsedInvocationEvents = ArgsRegistry.invocationEvents.getAll(keys);\n                final InstabugInvocationEvent[] invocationEvents = parsedInvocationEvents.toArray(new InstabugInvocationEvent[0]);\n                final int parsedLogLevel = ArgsRegistry.sdkLogLevels.getOrDefault(logLevel, LogLevel.ERROR);\n\n                final Application application = (Application) reactContext.getApplicationContext();\n\n                RNInstabug.Builder builder = new RNInstabug.Builder(application, token)\n                        .setInvocationEvents(invocationEvents)\n                        .setLogLevel(parsedLogLevel);\n\n                if (codePushVersion != null) {\n                    if (Instabug.isBuilt()) {\n                        Instabug.setCodePushVersion(codePushVersion);\n                    } else {\n                        builder.setCodePushVersion(codePushVersion);\n                    }\n                }\n                builder.build();\n            }\n        });\n    }\n\n    @ReactMethod\n    public void setCodePushVersion(@Nullable final String version) {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    Instabug.setCodePushVersion(version);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n    }\n\n\n    /**\n     * Adds tag(s) to issues before sending them\n     *\n     * @param tags\n     */\n    @ReactMethod\n    public void appendTags(final ReadableArray tags) {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    Object[] objectArray = ArrayUtil.toArray(tags);\n                    String[] stringArray = Arrays.copyOf(objectArray, objectArray.length, String[].class);\n                    Instabug.addTags(stringArray);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n\n    }\n\n    /**\n     * Change Locale of Instabug UI elements(defaults to English)\n     *\n     * @param instabugLocale\n     */\n    @ReactMethod\n    public void setLocale(final String instabugLocale) {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    final InstabugLocale parsedLocale = ArgsRegistry.locales\n                            .getOrDefault(instabugLocale, InstabugLocale.ENGLISH);\n                    final Locale locale = new Locale(parsedLocale.getCode(), parsedLocale.getCountry());\n                    Instabug.setLocale(locale);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n    }\n\n    /**\n     * The file at filePath will be uploaded along upcoming reports with the name\n     * fileNameWithExtension\n     *\n     * @param fileUri               the file uri\n     * @param fileNameWithExtension the file name with extension\n     */\n    @ReactMethod\n    public void setFileAttachment(final String fileUri, final String fileNameWithExtension) {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    File file = new File(fileUri);\n                    if (file.exists()) {\n                        Instabug.addFileAttachment(Uri.fromFile(file), fileNameWithExtension);\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n\n    }\n\n    /**\n     * Adds specific user data that you need to be added to the reports\n     *\n     * @param userData\n     */\n    @ReactMethod\n    public void setUserData(final String userData) {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    Instabug.setUserData(userData);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n    }\n\n    /**\n     * Set the primary color that the SDK will use to tint certain UI elements in the SDK\n     *\n     * @param primaryColor The value of the primary color ,\n     *                     whatever this color was parsed from a resource color or hex color\n     *                     or RGB color values\n     */\n    @ReactMethod\n    public void setPrimaryColor(final int primaryColor) {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    Instabug.setPrimaryColor(primaryColor);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n    }\n\n    /**\n     * Gets tags.\n     *\n     * @return all tags added\n     * @see #resetTags()\n     */\n    @ReactMethod\n    public void getTags(final Promise promise) {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                WritableArray tagsArray = Arguments.createArray();\n                try {\n                    ArrayList<String> tags = Instabug.getTags();\n                    for (int i = 0; i < tags.size(); i++) {\n                        tagsArray.pushString(tags.get(i));\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n                promise.resolve(tagsArray);\n            }\n        });\n    }\n\n    /**\n     * Set the user identity.\n     * Instabug will pre-fill the user email in reports.\n     *\n     * @param userEmail User's default email\n     * @param userName  Username.\n     * @param userId    User's ID\n     */\n    @ReactMethod\n    public void identifyUser(\n            final String userEmail,\n            final String userName,\n            @Nullable final String userId\n    ) {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    // The arguments get re-ordered here to match the API signature.\n                    Instabug.identifyUser(userName, userEmail, userId);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n    }\n\n    /**\n     * Reset ALL tags added\n     */\n    @ReactMethod\n    public void resetTags() {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    Instabug.resetTags();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n    }\n\n    @ReactMethod\n    public void logVerbose(final String message) {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    InstabugLog.v(message);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n    }\n\n    @ReactMethod\n    public void logDebug(final String message) {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    InstabugLog.d(message);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n    }\n\n    @ReactMethod\n    public void logInfo(final String message) {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    InstabugLog.i(message);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n    }\n\n    @ReactMethod\n    public void logError(final String message) {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    InstabugLog.e(message);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n    }\n\n    @ReactMethod\n    public void logWarn(final String message) {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    InstabugLog.w(message);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n    }\n\n    /**\n     * Clears Instabug internal log\n     */\n    @ReactMethod\n    public void clearLogs() {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    InstabugLog.clearLogs();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n    }\n\n    /**\n     * Sets user attribute to overwrite it's value or create a new one if it doesn't exist.\n     *\n     * @param key   the attribute\n     * @param value the value\n     */\n    @ReactMethod\n    public void setUserAttribute(final String key, final String value) {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    Instabug.setUserAttribute(key, value);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n    }\n\n    /**\n     * Gets specific user attribute.\n     *\n     * @param key the attribute key as string\n     * @return the desired user attribute\n     */\n    @ReactMethod\n    public void getUserAttribute(final String key, final Promise promise) {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                String userAttribute = \"\";\n                try {\n                    userAttribute = Instabug.getUserAttribute(key);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n                promise.resolve(userAttribute);\n            }\n        });\n    }\n\n    /**\n     * Removes user attribute if exists.\n     *\n     * @param key the attribute key as string\n     * @see #setUserAttribute(String, String)\n     */\n    @ReactMethod\n    public void removeUserAttribute(final String key) {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    Instabug.removeUserAttribute(key);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n    }\n\n    /**\n     * Gets all saved user attributes.\n     *\n     * @return all user attributes as HashMap<String, String>\n     */\n    @ReactMethod\n    public void getAllUserAttributes(final Promise promise) {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                WritableMap writableMap = Arguments.createMap();\n                try {\n                    HashMap<String, String> map = Instabug.getAllUserAttributes();\n                    for (HashMap.Entry<String, String> entry : map.entrySet()) {\n                        writableMap.putString(entry.getKey(), entry.getValue());\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n                promise.resolve(writableMap);\n            }\n        });\n    }\n\n    /**\n     * Clears all user attributes if exists.\n     */\n    @ReactMethod\n    public void clearAllUserAttributes() {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    Instabug.clearAllUserAttributes();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n    }\n\n    /**\n     * Sets InstabugSDK theme color.\n     *\n     * @param theme which is a constant String \"light\" or \"dark\"\n     */\n    @ReactMethod\n    public void setColorTheme(final String theme) {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    final InstabugColorTheme colorTheme = ArgsRegistry.colorThemes\n                            .getOrDefault(theme, InstabugColorTheme.InstabugColorThemeLight);\n                    Instabug.setColorTheme(colorTheme);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n    }\n\n    /**\n     * Overrides any of the strings shown in the SDK with custom ones.\n     * Allows you to customize any of the strings shown to users in the SDK.\n     *\n     * @param string String value to override the default one.\n     * @param key    Key of string to override.\n     */\n    @ReactMethod\n    public void setString(final String string, final String key) {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    final InstabugCustomTextPlaceHolder.Key parsedKey = ArgsRegistry.placeholders.get(key);\n                    placeHolders.set(parsedKey, string);\n                    Instabug.setCustomTextPlaceHolders(placeHolders);\n                } catch (java.lang.Exception exception) {\n                    exception.printStackTrace();\n                }\n            }\n        });\n    }\n\n    /**\n     * Sets the default value of the user's email to null and show email field and remove user\n     * name from all reports\n     * It also reset the chats on device and removes user attributes, user data and completed\n     * surveys.\n     */\n    @ReactMethod\n    public void logOut() {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    Instabug.logoutUser();\n                } catch (java.lang.Exception exception) {\n                    exception.printStackTrace();\n                }\n            }\n        });\n    }\n\n    /**\n     * Logs a user event that happens through the lifecycle of the application.\n     * Logged user events are going to be sent with each report, as well as at the end of a session.\n     *\n     * @param name Event name.\n     */\n    @ReactMethod\n    public void logUserEvent(final String name) {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    Instabug.logUserEvent(name);\n                } catch (java.lang.Exception exception) {\n                    exception.printStackTrace();\n                }\n            }\n        });\n    }\n\n    /**\n     * Sets a block of code to be executed before sending each report.\n     * This block is executed in the background before sending each report. Could\n     * be used for attaching logs and extra data to reports.\n     *\n     * @param preSendingHandler - A callback that gets executed before\n     *                          sending each bug\n     *                          report.\n     */\n    @ReactMethod\n    public void setPreSendingHandler(final Callback preSendingHandler) {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                Instabug.onReportSubmitHandler(new Report.OnReportCreatedListener() {\n                    @Override\n                    public void onReportCreated(Report report) {\n                        WritableMap reportParam = Arguments.createMap();\n                        reportParam.putArray(\"tagsArray\", convertArrayListToWritableArray(report.getTags()));\n                        reportParam.putArray(\"consoleLogs\", convertArrayListToWritableArray(report.getConsoleLog()));\n                        reportParam.putString(\"userData\", report.getUserData());\n                        reportParam.putMap(\"userAttributes\", convertFromHashMapToWriteableMap(report.getUserAttributes()));\n                        reportParam.putMap(\"fileAttachments\", convertFromHashMapToWriteableMap(report.getFileAttachments()));\n                        sendEvent(\"IBGpreSendingHandler\", reportParam);\n                        currentReport = report;\n                    }\n                });\n            }\n        });\n    }\n\n    protected static void clearCurrentReport() {\n        currentReport = null;\n    }\n\n    @ReactMethod\n    public void appendTagToReport(String tag) {\n        if (currentReport != null) {\n            currentReport.addTag(tag);\n        }\n    }\n\n    @ReactMethod\n    public void appendConsoleLogToReport(String consoleLog) {\n        if (currentReport != null) {\n            currentReport.appendToConsoleLogs(consoleLog);\n        }\n    }\n\n    @ReactMethod\n    public void setUserAttributeToReport(String key, String value) {\n        if (currentReport != null) {\n            currentReport.setUserAttribute(key, value);\n        }\n    }\n\n    @ReactMethod\n    public void logDebugToReport(String log) {\n        if (currentReport != null) {\n            currentReport.logDebug(log);\n        }\n    }\n\n    @ReactMethod\n    public void logVerboseToReport(String log) {\n        if (currentReport != null) {\n            currentReport.logVerbose(log);\n        }\n    }\n\n    @ReactMethod\n    public void logWarnToReport(String log) {\n        if (currentReport != null) {\n            currentReport.logWarn(log);\n        }\n    }\n\n    @ReactMethod\n    public void logErrorToReport(String log) {\n        if (currentReport != null) {\n            currentReport.logError(log);\n        }\n    }\n\n    @ReactMethod\n    public void logInfoToReport(String log) {\n        if (currentReport != null) {\n            currentReport.logInfo(log);\n        }\n    }\n\n    @ReactMethod\n    public void addFileAttachmentWithURLToReport(String urlString, String fileName) {\n        if (currentReport != null) {\n            Uri uri = Uri.parse(urlString);\n            currentReport.addFileAttachment(uri, fileName);\n        }\n    }\n\n    @ReactMethod\n    public void addFileAttachmentWithDataToReport(String data, String fileName) {\n        if (currentReport != null) {\n            currentReport.addFileAttachment(data.getBytes(), fileName);\n        }\n    }\n\n    private WritableMap convertFromHashMapToWriteableMap(HashMap hashMap) {\n        WritableMap writableMap = new WritableNativeMap();\n        for (int i = 0; i < hashMap.size(); i++) {\n            Object key = hashMap.keySet().toArray()[i];\n            Object value = hashMap.get(key);\n            writableMap.putString((String) key, (String) value);\n        }\n        return writableMap;\n    }\n\n    private static JSONObject objectToJSONObject(Object object) {\n        Object json = null;\n        JSONObject jsonObject = null;\n        try {\n            json = new JSONTokener(object.toString()).nextValue();\n        } catch (JSONException e) {\n            e.printStackTrace();\n        }\n        if (json instanceof JSONObject) {\n            jsonObject = (JSONObject) json;\n        }\n        return jsonObject;\n    }\n\n    private WritableArray convertArrayListToWritableArray(List arrayList) {\n        WritableArray writableArray = new WritableNativeArray();\n\n        for (int i = 0; i < arrayList.size(); i++) {\n            Object object = arrayList.get(i);\n\n            if (object instanceof String) {\n                writableArray.pushString((String) object);\n            } else {\n                JSONObject jsonObject = objectToJSONObject(object);\n                writableArray.pushMap((WritableMap) jsonObject);\n            }\n        }\n\n        return writableArray;\n\n    }\n\n    /**\n     * Clears all Uris of the attached files.\n     * The URIs which added via {@link Instabug#addFileAttachment} API not the physical files.\n     */\n    @ReactMethod\n    public void clearFileAttachment() {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    Instabug.clearFileAttachment();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n    }\n\n    @ReactMethod\n    public void setReproStepsConfig(final String bugMode, final String crashMode, final String sessionReplayMode) {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    final Integer resolvedBugMode = ArgsRegistry.reproModes.get(bugMode);\n                    final Integer resolvedCrashMode = ArgsRegistry.reproModes.get(crashMode);\n                    final Integer resolvedSessionReplayMode = ArgsRegistry.reproModes.get(sessionReplayMode);\n\n                    final ReproConfigurations config = new ReproConfigurations.Builder()\n                            .setIssueMode(IssueType.Bug, resolvedBugMode)\n                            .setIssueMode(IssueType.Crash, resolvedCrashMode)\n                            .setIssueMode(IssueType.SessionReplay, resolvedSessionReplayMode)\n                            .build();\n\n                    Instabug.setReproConfigurations(config);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n    }\n\n    /**\n     * Shows the welcome message in a specific mode.\n     *\n     * @param welcomeMessageMode An enum to set the welcome message mode to\n     *                           live, or beta.\n     */\n    @ReactMethod\n    public void showWelcomeMessageWithMode(final String welcomeMessageMode) {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    final WelcomeMessage.State parsedState = ArgsRegistry.welcomeMessageStates\n                            .getOrDefault(welcomeMessageMode, WelcomeMessage.State.LIVE);\n                    Instabug.showWelcomeMessage(parsedState);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n    }\n\n    /**\n     * Sets the welcome message mode to live, beta or disabled.\n     *\n     * @param welcomeMessageMode An enum to set the welcome message mode to\n     *                           live, beta or disabled.\n     */\n    @ReactMethod\n    public void setWelcomeMessageMode(final String welcomeMessageMode) {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    final WelcomeMessage.State parsedState = ArgsRegistry.welcomeMessageStates\n                            .getOrDefault(welcomeMessageMode, WelcomeMessage.State.LIVE);\n                    Instabug.setWelcomeMessageState(parsedState);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n    }\n\n    @ReactMethod\n    public void show() {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                Instabug.show();\n            }\n        });\n    }\n\n    /**\n     * Enable/disable session profiler\n     *\n     * @param sessionProfilerEnabled desired state of the session profiler feature\n     */\n    @ReactMethod\n    public void setSessionProfilerEnabled(final boolean sessionProfilerEnabled) {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    if (sessionProfilerEnabled) {\n                        Instabug.setSessionProfilerState(Feature.State.ENABLED);\n                    } else {\n                        Instabug.setSessionProfilerState(Feature.State.DISABLED);\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n    }\n\n    @ReactMethod\n    public void networkLogAndroid(final String url,\n                                  final String requestBody,\n                                  final String responseBody,\n                                  final String method,\n                                  final double responseCode,\n                                  final String requestHeaders,\n                                  final String responseHeaders,\n                                  final double duration) {\n        try {\n            final String date = String.valueOf(System.currentTimeMillis());\n\n            NetworkLog networkLog = new NetworkLog();\n            networkLog.setDate(date);\n            networkLog.setUrl(url);\n            networkLog.setMethod(method);\n            networkLog.setResponseCode((int) responseCode);\n            networkLog.setTotalDuration((long) duration);\n\n            try {\n                networkLog.setRequest(requestBody);\n                networkLog.setResponse(responseBody);\n                networkLog.setRequestHeaders(requestHeaders);\n                networkLog.setResponseHeaders(responseHeaders);\n            } catch (OutOfMemoryError | Exception exception) {\n                Log.d(TAG, \"Error: \" + exception.getMessage() + \"while trying to set network log contents (request body, response body, request headers, and response headers).\");\n            }\n\n            networkLog.insert();\n        } catch (OutOfMemoryError | Exception exception) {\n            Log.d(TAG, \"Error: \" + exception.getMessage() + \"while trying to insert a network log\");\n        }\n    }\n\n    @UiThread\n    @Nullable\n    private View resolveReactView(final int reactTag) {\n        final ReactApplicationContext reactContext = getReactApplicationContext();\n        final UIManagerModule uiManagerModule = reactContext.getNativeModule(UIManagerModule.class);\n\n        if (uiManagerModule == null) {\n            return null;\n        }\n\n        return uiManagerModule.resolveView(reactTag);\n    }\n\n\n    @ReactMethod\n    public void addPrivateView(final int reactTag) {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    final View view = resolveReactView(reactTag);\n\n                    Instabug.addPrivateViews(view);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n    }\n\n    @ReactMethod\n    public void removePrivateView(final int reactTag) {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    final View view = resolveReactView(reactTag);\n\n                    Instabug.removePrivateViews(view);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n    }\n\n    /**\n     * Reports that the screen name been changed (Current View).\n     *\n     * @param screenName string containing the screen name\n     */\n    @ReactMethod\n    public void reportCurrentViewChange(final String screenName) {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    Method method = getMethod(Class.forName(\"com.instabug.library.Instabug\"), \"reportCurrentViewChange\", String.class);\n                    if (method != null) {\n                        method.invoke(null, screenName);\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n    }\n\n    /**\n     * Reports that the screen has been changed (Repro Steps) the screen sent to this method will be the 'current view' on the dashboard\n     *\n     * @param screenName string containing the screen name\n     */\n    @ReactMethod\n    public void reportScreenChange(final String screenName) {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    Method method = getMethod(Class.forName(\"com.instabug.library.Instabug\"), \"reportScreenChange\", Bitmap.class, String.class);\n                    if (method != null) {\n                        method.invoke(null, null, screenName);\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n    }\n\n    /**\n     * @deprecated see {@link #addFeatureFlags(ReadableArray)}\n     */\n    @ReactMethod\n    public void addExperiments(final ReadableArray experiments) {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    Object[] objectArray = ArrayUtil.toArray(experiments);\n                    String[] stringArray = Arrays.copyOf(objectArray, objectArray.length, String[].class);\n                    Instabug.addExperiments(Arrays.asList(stringArray));\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n    }\n\n    /**\n     * @deprecated see {@link #removeFeatureFlags(ReadableArray)}\n     */\n    @ReactMethod\n    public void removeExperiments(final ReadableArray experiments) {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    Object[] objectArray = ArrayUtil.toArray(experiments);\n                    String[] stringArray = Arrays.copyOf(objectArray, objectArray.length, String[].class);\n                    Instabug.removeExperiments(Arrays.asList(stringArray));\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n    }\n\n    /**\n     * @deprecated see {@link #removeAllFeatureFlags()}\n     */\n    @ReactMethod\n    public void clearAllExperiments() {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    Instabug.clearAllExperiments();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n    }\n\n    @ReactMethod\n    public void addFeatureFlags(final ReadableMap featureFlagsMap) {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    Iterator<Map.Entry<String, Object>> iterator = featureFlagsMap.getEntryIterator();\n                    ArrayList<IBGFeatureFlag> featureFlags = new ArrayList<>();\n                    while (iterator.hasNext()) {\n                        Map.Entry<String, Object> item = iterator.next();\n                        String variant = (String) item.getValue();\n                        String name = item.getKey();\n                        featureFlags.add(new IBGFeatureFlag(name, variant.isEmpty() ? null : variant));\n                    }\n                    if (!featureFlags.isEmpty()) {\n                        Instabug.addFeatureFlags(featureFlags);\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n    }\n\n    @ReactMethod\n    public void removeFeatureFlags(final ReadableArray featureFlags) {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    ArrayList<String> stringArray = ArrayUtil.parseReadableArrayOfStrings(featureFlags);\n                    Instabug.removeFeatureFlag(stringArray);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n    }\n\n    @ReactMethod\n    public void removeAllFeatureFlags() {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    Instabug.removeAllFeatureFlags();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n    }\n\n    @ReactMethod\n    public void willRedirectToStore() {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    Instabug.willRedirectToStore();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n    }\n\n    /**\n     * Register a listener for W3C flags value change\n     */\n    @ReactMethod\n    public void registerW3CFlagsChangeListener() {\n\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    InternalCore.INSTANCE._setFeaturesStateListener(new FeaturesStateListener() {\n                        @Override\n                        public void invoke(@NonNull CoreFeaturesState featuresState) {\n                            WritableMap params = Arguments.createMap();\n                            params.putBoolean(\"isW3ExternalTraceIDEnabled\", featuresState.isW3CExternalTraceIdEnabled());\n                            params.putBoolean(\"isW3ExternalGeneratedHeaderEnabled\", featuresState.isAttachingGeneratedHeaderEnabled());\n                            params.putBoolean(\"isW3CaughtHeaderEnabled\", featuresState.isAttachingCapturedHeaderEnabled());\n\n                            sendEvent(Constants.IBG_ON_NEW_W3C_FLAGS_UPDATE_RECEIVED_CALLBACK, params);\n                        }\n                    });\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n\n            }\n\n        });\n    }\n\n\n    /**\n     * Get first time Value of W3ExternalTraceID flag\n     */\n    @ReactMethod\n    public void isW3ExternalTraceIDEnabled(Promise promise) {\n\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    promise.resolve(InternalCore.INSTANCE._isFeatureEnabled(CoreFeature.W3C_EXTERNAL_TRACE_ID));\n                } catch (Exception e) {\n                    e.printStackTrace();\n                    promise.resolve(false);\n                }\n\n            }\n\n        });\n    }\n\n\n    /**\n     * Get first time Value of W3ExternalGeneratedHeader flag\n     */\n    @ReactMethod\n    public void isW3ExternalGeneratedHeaderEnabled(Promise promise) {\n\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    promise.resolve(InternalCore.INSTANCE._isFeatureEnabled(CoreFeature.W3C_ATTACHING_GENERATED_HEADER));\n                } catch (Exception e) {\n                    e.printStackTrace();\n                    promise.resolve(false);\n                }\n\n            }\n\n        });\n    }\n\n    /**\n     * Get first time Value of W3CaughtHeader flag\n     */\n    @ReactMethod\n    public void isW3CaughtHeaderEnabled(Promise promise) {\n\n        MainThreadHandler.runOnMainThread(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    promise.resolve(InternalCore.INSTANCE._isFeatureEnabled(CoreFeature.W3C_ATTACHING_CAPTURED_HEADER));\n                } catch (Exception e) {\n                    e.printStackTrace();\n                    promise.resolve(false);\n                }\n\n            }\n\n        });\n    }\n\n\n    /**\n     * Map between the exported JS constant and the arg key in {@link ArgsRegistry}.\n     * The constant name and the arg key should match to be able to resolve the\n     * constant with its actual value from the {@link ArgsRegistry} maps.\n     *\n     * This is a workaround, because RN cannot resolve enums in the constants map.\n     */\n    @Override\n    public Map<String, Object> getConstants() {\n        final Map<String, Object> args = ArgsRegistry.getAll();\n        final Map<String, Object> constants = new HashMap<>();\n\n        for (String key : args.keySet()) {\n            constants.put(key, key);\n        }\n\n        return constants;\n    }\n\n    /**\n     * Sets the auto mask screenshots types.\n     *\n     * @param autoMaskingTypes The masking type to be applied.\n     */\n    @ReactMethod\n    public void enableAutoMasking(@NonNull ReadableArray autoMaskingTypes) {\n        MainThreadHandler.runOnMainThread(new Runnable() {\n\n            @Override\n            public void run() {\n                int[] autoMassingTypesArray = new int[autoMaskingTypes.size()];\n                for (int i = 0; i < autoMaskingTypes.size(); i++) {\n                    String key = autoMaskingTypes.getString(i);\n\n                    autoMassingTypesArray[i] = ArgsRegistry.autoMaskingTypes.get(key);\n\n                }\n\n                Instabug.setAutoMaskScreenshotsTypes(autoMassingTypesArray);\n            }\n\n        });\n    }\n}\n"
        }
    ]
}