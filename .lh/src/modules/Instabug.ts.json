{
    "sourceFile": "src/modules/Instabug.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1744633257493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744633283826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,8 +33,15 @@\n let _currentScreen: string | null = null;\n let _lastScreen: string | null = null;\n let _isFirstScreen = false;\n const firstScreen = 'Initial Screen';\n+<<<<<<< HEAD\n+=======\n+let _currentAppState = AppState.currentState;\n+let isNativeInterceptionFeatureEnabled = false; // Checks the value of \"cp_native_interception_enabled\" backend flag.\n+let hasAPMNetworkPlugin = false; // Android only: checks if the APM plugin is installed.\n+let shouldEnableNativeInterception = false; // Android: used to disable APM logging inside reportNetworkLog() -> NativeAPM.networkLogAndroid(), iOS: used to control native interception (true == enabled , false == disabled)\n+>>>>>>> f248be7f (chore: remove APMNetworkEnabled flag from android)\n \n /**\n  * Enables or disables Instabug functionality.\n  * @param isEnabled A boolean to enable/disable Instabug.\n@@ -64,9 +71,8 @@\n   console.log(\n     `Andrew: init -> {\n      isNativeInterceptionFeatureEnabled: ${isNativeInterceptionFeatureEnabled},\n      hasAPMNetworkPlugin: ${hasAPMNetworkPlugin},\n-     isApmNetworkEnabled: ${isAPMNetworkEnabled},\n      shouldEnableNativeInterception: ${shouldEnableNativeInterception}\n     }`,\n   );\n }\n@@ -77,9 +83,25 @@\n  * method that SHOULD be called.\n  * Should be called in constructor of the AppRegistry component\n  * @param config SDK configurations. See {@link InstabugConfig} for more info.\n  */\n+<<<<<<< HEAD\n export const init = (config: InstabugConfig) => {\n+=======\n+export const init = async (config: InstabugConfig) => {\n+  // Initialize necessary variables\n+  isNativeInterceptionFeatureEnabled = await NativeNetworkLogger.isNativeInterceptionEnabled();\n+  if (Platform.OS === 'android') {\n+    hasAPMNetworkPlugin = await NativeNetworkLogger.hasAPMNetworkPlugin();\n+    shouldEnableNativeInterception =\n+      config.networkInterceptionMode === NetworkInterceptionMode.native;\n+  }\n+\n+  // Add app state listener to handle background/foreground transitions\n+  addAppStateListener(async (nextAppState) => handleAppStateChange(nextAppState, config));\n+\n+  // Set up error capturing and rejection handling\n+>>>>>>> f248be7f (chore: remove APMNetworkEnabled flag from android)\n   InstabugUtils.captureJsErrors();\n   captureUnhandledRejections();\n \n   if (Platform.OS === 'android') {\n"
                }
            ],
            "date": 1744633257493,
            "name": "Commit-0",
            "content": "import type React from 'react';\nimport { Platform, findNodeHandle, processColor } from 'react-native';\n\nimport type {\n  NavigationContainerRefWithCurrent,\n  NavigationState as NavigationStateV5,\n} from '@react-navigation/native';\nimport type { ComponentDidAppearEvent } from 'react-native-navigation';\nimport type { NavigationAction, NavigationState as NavigationStateV4 } from 'react-navigation';\n\nimport type { InstabugConfig } from '../models/InstabugConfig';\nimport Report from '../models/Report';\nimport { emitter, NativeEvents, NativeInstabug } from '../native/NativeInstabug';\nimport { registerW3CFlagsListener } from '../utils/FeatureFlags';\nimport {\n  ColorTheme,\n  Locale,\n  LogLevel,\n  NetworkInterceptionMode,\n  ReproStepsMode,\n  StringKey,\n  WelcomeMessageMode,\n} from '../utils/Enums';\nimport InstabugUtils, { stringifyIfNotString } from '../utils/InstabugUtils';\nimport * as NetworkLogger from './NetworkLogger';\nimport { captureUnhandledRejections } from '../utils/UnhandledRejectionTracking';\nimport type { ReproConfig } from '../models/ReproConfig';\nimport type { FeatureFlag } from '../models/FeatureFlag';\nimport InstabugConstants from '../utils/InstabugConstants';\nimport { InstabugRNConfig } from '../utils/config';\nimport { Logger } from '../utils/logger';\n\nlet _currentScreen: string | null = null;\nlet _lastScreen: string | null = null;\nlet _isFirstScreen = false;\nconst firstScreen = 'Initial Screen';\n<<<<<<< HEAD\n=======\nlet _currentAppState = AppState.currentState;\nlet isNativeInterceptionFeatureEnabled = false; // Checks the value of \"cp_native_interception_enabled\" backend flag.\nlet hasAPMNetworkPlugin = false; // Android only: checks if the APM plugin is installed.\nlet shouldEnableNativeInterception = false; // Android: used to disable APM logging inside reportNetworkLog() -> NativeAPM.networkLogAndroid(), iOS: used to control native interception (true == enabled , false == disabled)\n>>>>>>> f248be7f (chore: remove APMNetworkEnabled flag from android)\n\n/**\n * Enables or disables Instabug functionality.\n * @param isEnabled A boolean to enable/disable Instabug.\n */\nexport const setEnabled = (isEnabled: boolean) => {\n  NativeInstabug.setEnabled(isEnabled);\n};\n\n/**\n * Reports that the screen name been changed (Current View field on dashboard).\n * only for android.\n *\n * Normally reportScreenChange handles taking a screenshot for reproduction\n * steps and the Current View field on the dashboard. But we've faced issues\n * in android where we needed to separate them, that's why we only call it\n * for android.\n *\n * @param screenName string containing the screen name\n */\nfunction reportCurrentViewForAndroid(screenName: string | null) {\n  if (Platform.OS === 'android' && screenName != null) {\n    NativeInstabug.reportCurrentViewChange(screenName);\n  }\n}\n\nfunction _logFlags() {\n  console.log(\n    `Andrew: init -> {\n     isNativeInterceptionFeatureEnabled: ${isNativeInterceptionFeatureEnabled},\n     hasAPMNetworkPlugin: ${hasAPMNetworkPlugin},\n     shouldEnableNativeInterception: ${shouldEnableNativeInterception}\n    }`,\n  );\n}\n\n/**\n * Initializes the SDK.\n * This is the main SDK method that does all the magic. This is the only\n * method that SHOULD be called.\n * Should be called in constructor of the AppRegistry component\n * @param config SDK configurations. See {@link InstabugConfig} for more info.\n */\n<<<<<<< HEAD\nexport const init = (config: InstabugConfig) => {\n=======\nexport const init = async (config: InstabugConfig) => {\n  // Initialize necessary variables\n  isNativeInterceptionFeatureEnabled = await NativeNetworkLogger.isNativeInterceptionEnabled();\n  if (Platform.OS === 'android') {\n    hasAPMNetworkPlugin = await NativeNetworkLogger.hasAPMNetworkPlugin();\n    shouldEnableNativeInterception =\n      config.networkInterceptionMode === NetworkInterceptionMode.native;\n  }\n\n  // Add app state listener to handle background/foreground transitions\n  addAppStateListener(async (nextAppState) => handleAppStateChange(nextAppState, config));\n\n  // Set up error capturing and rejection handling\n>>>>>>> f248be7f (chore: remove APMNetworkEnabled flag from android)\n  InstabugUtils.captureJsErrors();\n  captureUnhandledRejections();\n\n  if (Platform.OS === 'android') {\n    registerW3CFlagsListener();\n  }\n\n  // Default networkInterceptionMode to JavaScript\n  if (config.networkInterceptionMode == null) {\n    config.networkInterceptionMode = NetworkInterceptionMode.javascript;\n  }\n\n  if (config.networkInterceptionMode === NetworkInterceptionMode.javascript) {\n    NetworkLogger.setEnabled(true);\n  }\n\n  NativeInstabug.init(\n    config.token,\n    config.invocationEvents,\n    config.debugLogsLevel ?? LogLevel.error,\n    config.networkInterceptionMode === NetworkInterceptionMode.native,\n    config.codePushVersion,\n  );\n\n  _isFirstScreen = true;\n  _currentScreen = firstScreen;\n\n  InstabugRNConfig.debugLogsLevel = config.debugLogsLevel ?? LogLevel.error;\n\n  reportCurrentViewForAndroid(firstScreen);\n  setTimeout(() => {\n    if (_currentScreen === firstScreen) {\n      NativeInstabug.reportScreenChange(firstScreen);\n      _currentScreen = null;\n    }\n  }, 1000);\n};\n\n/**\n * Sets the Code Push version to be sent with each report.\n * @param version the Code Push version.\n */\nexport const setCodePushVersion = (version: string) => {\n  NativeInstabug.setCodePushVersion(version);\n};\n\n/**\n * Attaches user data to each report being sent.\n * Each call to this method overrides the user data to be attached.\n * Maximum size of the string is 1,000 characters.\n * @param data A string to be attached to each report, with a maximum size of 1,000 characters.\n */\nexport const setUserData = (data: string) => {\n  NativeInstabug.setUserData(data);\n};\n\n/**\n * Sets whether the SDK is tracking user steps or not.\n * Enabling user steps would give you an insight on the scenario a user has\n * performed before encountering a bug or a crash. User steps are attached\n * with each report being sent.\n * @param isEnabled A boolean to set user steps tracking to being enabled or disabled.\n */\nexport const setTrackUserSteps = (isEnabled: boolean) => {\n  if (Platform.OS === 'ios') {\n    NativeInstabug.setTrackUserSteps(isEnabled);\n  }\n};\n\n/**\n * Sets whether IBGLog should also print to Xcode's console log or not.\n * @param printsToConsole A boolean to set whether printing to\n * Xcode's console is enabled or not.\n */\nexport const setIBGLogPrintsToConsole = (printsToConsole: boolean) => {\n  if (Platform.OS === 'ios') {\n    NativeInstabug.setIBGLogPrintsToConsole(printsToConsole);\n  }\n};\n\n/**\n * The session profiler is enabled by default and it attaches to the bug and\n * crash reports the following information during the last 60 seconds before the report is sent.\n * @param isEnabled A boolean parameter to enable or disable the feature.\n */\nexport const setSessionProfilerEnabled = (isEnabled: boolean) => {\n  NativeInstabug.setSessionProfilerEnabled(isEnabled);\n};\n\n/**\n * Sets the SDK's locale.\n * Use to change the SDK's UI to different language.\n * Defaults to the device's current locale.\n * @param sdkLocale A locale to set the SDK to.\n */\nexport const setLocale = (sdkLocale: Locale) => {\n  NativeInstabug.setLocale(sdkLocale);\n};\n\n/**\n * Sets the color theme of the SDK's whole UI.\n * @param sdkTheme\n */\nexport const setColorTheme = (sdkTheme: ColorTheme) => {\n  NativeInstabug.setColorTheme(sdkTheme);\n};\n\n/**\n * Sets the primary color of the SDK's UI.\n * Sets the color of UI elements indicating interactivity or call to action.\n * To use, import processColor and pass to it with argument the color hex\n * as argument.\n * @param color A color to set the UI elements of the SDK to.\n */\nexport const setPrimaryColor = (color: string) => {\n  NativeInstabug.setPrimaryColor(processColor(color));\n};\n\n/**\n * Appends a set of tags to previously added tags of reported feedback,\n * bug or crash.\n * @param tags An array of tags to append to current tags.\n */\nexport const appendTags = (tags: string[]) => {\n  NativeInstabug.appendTags(tags);\n};\n\n/**\n * Manually removes all tags of reported feedback, bug or crash.\n */\nexport const resetTags = () => {\n  NativeInstabug.resetTags();\n};\n\n/**\n * Gets all tags of reported feedback, bug or crash.\n */\nexport const getTags = async (): Promise<string[] | null> => {\n  const tags = await NativeInstabug.getTags();\n\n  return tags;\n};\n\n/**\n * Overrides any of the strings shown in the SDK with custom ones.\n * Allows you to customize any of the strings shown to users in the SDK.\n * @param key Key of string to override.\n * @param string String value to override the default one.\n */\nexport const setString = (key: StringKey, string: string) => {\n  // Suffix the repro steps list item numbering title with a # to unify the string key's\n  // behavior between Android and iOS\n  if (Platform.OS === 'android' && key === StringKey.reproStepsListItemNumberingTitle) {\n    string = `${string} #`;\n  }\n\n  NativeInstabug.setString(string, key);\n};\n\n/**\n * Sets the default value of the user's email and ID and hides the email field from the reporting UI\n * and set the user's name to be included with all reports.\n * It also reset the chats on device to that email and removes user attributes,\n * user data and completed surveys.\n * @param email Email address to be set as the user's email.\n * @param name Name of the user to be set.\n * @param [id] ID of the user to be set.\n */\nexport const identifyUser = (email: string, name: string, id?: string) => {\n  NativeInstabug.identifyUser(email, name, id);\n};\n\n/**\n * Sets the default value of the user's email to nil and show email field and remove user name\n * from all reports\n * It also reset the chats on device and removes user attributes, user data and completed surveys.\n */\nexport const logOut = () => {\n  NativeInstabug.logOut();\n};\n\n/**\n * Logs a user event that happens through the lifecycle of the application.\n * Logged user events are going to be sent with each report, as well as at the end of a session.\n * @param name Event name.\n */\nexport const logUserEvent = (name: string) => {\n  NativeInstabug.logUserEvent(name);\n};\n\n/**\n * Appends a log message to Instabug internal log.\n * These logs are then sent along the next uploaded report.\n * All log messages are timestamped.\n * Logs aren't cleared per single application run.\n * If you wish to reset the logs, use {@link clearLogs()}\n * Note: logs passed to this method are **NOT** printed to Logcat.\n *\n * @param message the message\n */\nexport const logVerbose = (message: string) => {\n  if (!message) {\n    return;\n  }\n  message = stringifyIfNotString(message);\n  NativeInstabug.logVerbose(message);\n};\n\n/**\n * Appends a log message to Instabug internal log.\n * These logs are then sent along the next uploaded report.\n * All log messages are timestamped.\n * Logs aren't cleared per single application run.\n * If you wish to reset the logs, use {@link clearLogs()}\n * Note: logs passed to this method are **NOT** printed to Logcat.\n *\n * @param message the message\n */\nexport const logInfo = (message: string) => {\n  if (!message) {\n    return;\n  }\n  message = stringifyIfNotString(message);\n  NativeInstabug.logInfo(message);\n};\n\n/**\n * Appends a log message to Instabug internal log.\n * These logs are then sent along the next uploaded report.\n * All log messages are timestamped.\n * Logs aren't cleared per single application run.\n * If you wish to reset the logs, use {@link clearLogs()}\n * Note: logs passed to this method are **NOT** printed to Logcat.\n *\n * @param message the message\n */\nexport const logDebug = (message: string) => {\n  if (!message) {\n    return;\n  }\n  message = stringifyIfNotString(message);\n  NativeInstabug.logDebug(message);\n};\n\n/**\n * Appends a log message to Instabug internal log.\n * These logs are then sent along the next uploaded report.\n * All log messages are timestamped.\n * Logs aren't cleared per single application run.\n * If you wish to reset the logs, use {@link clearLogs()}\n * Note: logs passed to this method are **NOT** printed to Logcat.\n *\n * @param message the message\n */\nexport const logError = (message: string) => {\n  if (!message) {\n    return;\n  }\n  message = stringifyIfNotString(message);\n  NativeInstabug.logError(message);\n};\n\n/**\n * Appends a log message to Instabug internal log.\n * These logs are then sent along the next uploaded report.\n * All log messages are timestamped.\n * Logs aren't cleared per single application run.\n * If you wish to reset the logs, use {@link clearLogs()}\n * Note: logs passed to this method are **NOT** printed to Logcat.\n *\n * @param message the message\n */\nexport const logWarn = (message: string) => {\n  if (!message) {\n    return;\n  }\n  message = stringifyIfNotString(message);\n  NativeInstabug.logWarn(message);\n};\n\n/**\n * Clear all Instabug logs, console logs, network logs and user steps.\n */\nexport const clearLogs = () => {\n  NativeInstabug.clearLogs();\n};\n\n/**\n * Sets the repro steps mode for bugs and crashes.\n *\n * @param config The repro steps config.\n *\n * @example\n * ```js\n * Instabug.setReproStepsConfig({\n *   bug: ReproStepsMode.enabled,\n *   crash: ReproStepsMode.disabled,\n *   sessionReplay: ReproStepsMode.enabled,\n * });\n * ```\n */\nexport const setReproStepsConfig = (config: ReproConfig) => {\n  let bug = config.bug ?? ReproStepsMode.enabled;\n  let crash = config.crash ?? ReproStepsMode.enabledWithNoScreenshots;\n  let sessionReplay = config.sessionReplay ?? ReproStepsMode.enabled;\n\n  if (config.all != null) {\n    bug = config.all;\n    crash = config.all;\n    sessionReplay = config.all;\n  }\n\n  NativeInstabug.setReproStepsConfig(bug, crash, sessionReplay);\n};\n\n/**\n * Sets user attribute to overwrite it's value or create a new one if it doesn't exist.\n *\n * @param key the attribute\n * @param value the value\n */\nexport const setUserAttribute = (key: string, value: string) => {\n  if (!key || typeof key !== 'string' || typeof value !== 'string') {\n    Logger.error(InstabugConstants.SET_USER_ATTRIBUTES_ERROR_TYPE_MESSAGE);\n    return;\n  }\n\n  NativeInstabug.setUserAttribute(key, value);\n};\n\n/**\n * Returns the user attribute associated with a given key.\n * @param key The attribute key as string\n */\nexport const getUserAttribute = async (key: string): Promise<string | null> => {\n  const attribute = await NativeInstabug.getUserAttribute(key);\n\n  return attribute;\n};\n\n/**\n * Removes user attribute if exists.\n *\n * @param key the attribute key as string\n * @see {@link setUserAttribute}\n */\nexport const removeUserAttribute = (key: string) => {\n  if (!key || typeof key !== 'string') {\n    Logger.error(InstabugConstants.REMOVE_USER_ATTRIBUTES_ERROR_TYPE_MESSAGE);\n\n    return;\n  }\n  NativeInstabug.removeUserAttribute(key);\n};\n\n/**\n * Returns all user attributes.\n * set user attributes, or an empty dictionary if no user attributes have been set.\n */\nexport const getAllUserAttributes = async (): Promise<Record<string, string>> => {\n  const attributes = await NativeInstabug.getAllUserAttributes();\n\n  return attributes;\n};\n\n/**\n * Clears all user attributes if exists.\n */\nexport const clearAllUserAttributes = () => {\n  NativeInstabug.clearAllUserAttributes();\n};\n\n/**\n * Shows the welcome message in a specific mode.\n * @param mode An enum to set the welcome message mode to live, or beta.\n */\nexport const showWelcomeMessage = (mode: WelcomeMessageMode) => {\n  NativeInstabug.showWelcomeMessageWithMode(mode);\n};\n\n/**\n * Sets the welcome message mode to live, beta or disabled.\n * @param mode An enum to set the welcome message mode to live, beta or disabled.\n */\nexport const setWelcomeMessageMode = (mode: WelcomeMessageMode) => {\n  NativeInstabug.setWelcomeMessageMode(mode);\n};\n\n/**\n * Add file to be attached to the bug report.\n * @param filePath\n * @param fileName\n */\nexport const addFileAttachment = (filePath: string, fileName: string) => {\n  if (Platform.OS === 'android') {\n    NativeInstabug.setFileAttachment(filePath, fileName);\n  } else {\n    NativeInstabug.setFileAttachment(filePath);\n  }\n};\n\n/**\n * Hides component from screenshots, screen recordings and view hierarchy.\n * @param viewRef the ref of the component to hide\n */\nexport const addPrivateView = (viewRef: number | React.Component | React.ComponentClass) => {\n  const nativeTag = findNodeHandle(viewRef);\n  NativeInstabug.addPrivateView(nativeTag);\n};\n\n/**\n * Removes component from the set of hidden views. The component will show again in\n * screenshots, screen recordings and view hierarchy.\n * @param viewRef the ref of the component to remove from hidden views\n */\nexport const removePrivateView = (viewRef: number | React.Component | React.ComponentClass) => {\n  const nativeTag = findNodeHandle(viewRef);\n  NativeInstabug.removePrivateView(nativeTag);\n};\n\n/**\n * Shows default Instabug prompt.\n */\nexport const show = () => {\n  NativeInstabug.show();\n};\n\nexport const onReportSubmitHandler = (handler?: (report: Report) => void) => {\n  emitter.addListener(NativeEvents.PRESENDING_HANDLER, (report) => {\n    const { tags, consoleLogs, instabugLogs, userAttributes, fileAttachments } = report;\n    const reportObj = new Report(tags, consoleLogs, instabugLogs, userAttributes, fileAttachments);\n    handler && handler(reportObj);\n  });\n\n  NativeInstabug.setPreSendingHandler(handler);\n};\n\nexport const onNavigationStateChange = (\n  prevState: NavigationStateV4,\n  currentState: NavigationStateV4,\n  _action: NavigationAction,\n) => {\n  const currentScreen = InstabugUtils.getActiveRouteName(currentState);\n  const prevScreen = InstabugUtils.getActiveRouteName(prevState);\n\n  if (prevScreen !== currentScreen) {\n    reportCurrentViewForAndroid(currentScreen);\n    if (_currentScreen != null && _currentScreen !== firstScreen) {\n      NativeInstabug.reportScreenChange(_currentScreen);\n      _currentScreen = null;\n    }\n    _currentScreen = currentScreen;\n    setTimeout(() => {\n      if (currentScreen && _currentScreen === currentScreen) {\n        NativeInstabug.reportScreenChange(currentScreen);\n        _currentScreen = null;\n      }\n    }, 1000);\n  }\n};\n\nexport const onStateChange = (state?: NavigationStateV5) => {\n  if (!state) {\n    return;\n  }\n\n  const currentScreen = InstabugUtils.getFullRoute(state);\n  reportCurrentViewForAndroid(currentScreen);\n  if (_currentScreen !== null && _currentScreen !== firstScreen) {\n    NativeInstabug.reportScreenChange(_currentScreen);\n    _currentScreen = null;\n  }\n\n  _currentScreen = currentScreen;\n  setTimeout(() => {\n    if (_currentScreen === currentScreen) {\n      NativeInstabug.reportScreenChange(currentScreen);\n      _currentScreen = null;\n    }\n  }, 1000);\n};\n\n/**\n * Sets a listener for screen change\n *  @param navigationRef a refrence of a navigation container\n *\n */\nexport const setNavigationListener = (\n  navigationRef: NavigationContainerRefWithCurrent<ReactNavigation.RootParamList>,\n) => {\n  return navigationRef.addListener('state', () => {\n    onStateChange(navigationRef.getRootState());\n  });\n};\n\nexport const reportScreenChange = (screenName: string) => {\n  NativeInstabug.reportScreenChange(screenName);\n};\n\n/**\n * Add experiments to next report.\n * @param experiments An array of experiments to add to the next report.\n *\n * @deprecated Please migrate to the new Feature Flags APIs: {@link addFeatureFlags}.\n */\nexport const addExperiments = (experiments: string[]) => {\n  NativeInstabug.addExperiments(experiments);\n};\n\n/**\n * Remove experiments from next report.\n * @param experiments An array of experiments to remove from the next report.\n *\n * @deprecated Please migrate to the new Feature Flags APIs: {@link removeFeatureFlags}.\n */\nexport const removeExperiments = (experiments: string[]) => {\n  NativeInstabug.removeExperiments(experiments);\n};\n\n/**\n * Clear all experiments\n *\n * @deprecated Please migrate to the new Feature Flags APIs: {@link removeAllFeatureFlags}.\n */\nexport const clearAllExperiments = () => {\n  NativeInstabug.clearAllExperiments();\n};\n\n/**\n * Add feature flags to the next report.\n * @param featureFlags An array of feature flags to add to the next report.\n */\nexport const addFeatureFlags = (featureFlags: FeatureFlag[]) => {\n  const entries = featureFlags.map((item) => [item.name, item.variant || '']);\n  const flags = Object.fromEntries(entries);\n  NativeInstabug.addFeatureFlags(flags);\n};\n\n/**\n * Add a feature flag to the to next report.\n */\nexport const addFeatureFlag = (featureFlag: FeatureFlag) => {\n  addFeatureFlags([featureFlag]);\n};\n\n/**\n * Remove feature flags from the next report.\n * @param featureFlags An array of  feature flags to remove from the next report.\n */\nexport const removeFeatureFlags = (featureFlags: string[]) => {\n  NativeInstabug.removeFeatureFlags(featureFlags);\n};\n\n/**\n * Remove a feature flag from the next report.\n * @param name the name of the feature flag to remove from the next report.\n */\nexport const removeFeatureFlag = (name: string) => {\n  removeFeatureFlags([name]);\n};\n\n/**\n * Clear all feature flags\n */\nexport const removeAllFeatureFlags = () => {\n  NativeInstabug.removeAllFeatureFlags();\n};\n\n/**\n * This API has to be call when using custom app rating prompt\n */\nexport const willRedirectToStore = () => {\n  NativeInstabug.willRedirectToStore();\n};\n\n/**\n * This API has be called when changing the default Metro server port (8081) to exclude the DEV URL from network logging.\n */\nexport const setMetroDevServerPort = (port: number) => {\n  InstabugRNConfig.metroDevServerPort = port.toString();\n};\n\nexport const componentDidAppearListener = (event: ComponentDidAppearEvent) => {\n  if (_isFirstScreen) {\n    _lastScreen = event.componentName;\n    _isFirstScreen = false;\n    return;\n  }\n  if (_lastScreen !== event.componentName) {\n    NativeInstabug.reportScreenChange(event.componentName);\n    _lastScreen = event.componentName;\n  }\n};\n\n/**\n * Sets listener to W3ExternalTraceID flag changes\n * @param handler A callback that gets the update value of the flag\n */\nexport const _registerW3CFlagsChangeListener = (\n  handler: (payload: {\n    isW3ExternalTraceIDEnabled: boolean;\n    isW3ExternalGeneratedHeaderEnabled: boolean;\n    isW3CaughtHeaderEnabled: boolean;\n  }) => void,\n) => {\n  emitter.addListener(NativeEvents.ON_W3C_FLAGS_CHANGE, (payload) => {\n    handler(payload);\n  });\n  NativeInstabug.registerW3CFlagsChangeListener();\n};\n"
        }
    ]
}